#!groovy

@Library("Infrastructure") _

properties([
    parameters([
        string(name: 'PRODUCT', defaultValue: 'div', description: 'Divorce'),
        string(name: 'COMPONENT', defaultValue: 'rfe', description: 'Divorce Respondent Frontend'),
        string(name: 'TYPE', defaultValue: 'nodejs', description: ''),
        string(name: 'ENVIRONMENT', defaultValue: 'saat', description: 'Environment where code should be built and deployed'),
        choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in')
    ])
])

List<LinkedHashMap<String, Object>> secrets = [
  secret('session-secret', 'SESSION_SECRET'),
  secret('redis-secret', 'REDIS_ENCRYPTION_SECRET'),
  secret('idam-secret', 'IDAM_SECRET')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withParameterizedPipeline(params.TYPE, params.PRODUCT, params.COMPONENT, params.ENVIRONMENT, params.SUBSCRIPTION) {
  loadVaultSecrets(secrets)
  setVaultName('div')
  
  after('test') {
    sh 'yarn test:validation'
  }

  before('funtionalTest:saat') {
    // required for running functional tests on CI
    env.CASE_MAINTENANCE_BASE_URL = 'http://div-cms-saat.service.core-compute-saat.internal'
    env.PREVIEW_ENV = 'true'
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  after('functionalTest:saat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }
}
