#!groovy

@Library("Infrastructure")

String product = "div"
String component = "rfe"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'div-${env}': [
    secret('session-secret', 'SESSION_SECRET'),
    secret('redis-secret', 'REDIS_ENCRYPTION_SECRET'),
    secret('idam-secret', 'IDAM_SECRET'),
    secret('os-places-token', 'POST_CODE_ACCESS_TOKEN')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}


withPipeline("nodejs", product, component) {
  enableAksStagingDeployment()
  disableLegacyDeployment()

  loadVaultSecrets(secrets)

  after('test') {
    yarnBuilder.yarn('test:validation')
    // enable yarn audit and send message on master branch only
    try {
      yarnBuilder.yarn('audit')
    } catch (error) {
      onMaster {
        slackSend(channel: '#div-dev', color: 'warning', message: "Yarn Audit has detected vulnerabilities in ${env.JOB_NAME}. You can check if there are patches for them in the full report, build details here: <${env.RUN_DISPLAY_URL}|Build ${env.BUILD_DISPLAY_NAME}>.")
      }
    }
    // required for running functional tests on CI
  }

  before('functionalTest:aks') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  before('functionalTest:preview') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  before('functionalTest:aat') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }
}
